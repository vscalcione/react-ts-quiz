{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/francesco/Desktop/react-quiz-git/react-quiz/src/components/QuestionCard.tsx\";\nimport React from 'react'; // Types\n\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\nconst QuestionCard = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions\n}) => /*#__PURE__*/React.createElement(Wrapper, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"number\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }\n}, \"Question: \", questionNr, \" / \", totalQuestions), /*#__PURE__*/React.createElement(\"p\", {\n  dangerouslySetInnerHTML: {\n    __html: question\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }\n}, answers.map(answer => /*#__PURE__*/React.createElement(ButtonWrapper, {\n  key: answer,\n  correct: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.correctAnswer) === answer,\n  userClicked: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.answer) === answer,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"button\", {\n  disabled: userAnswer ? true : false,\n  value: answer,\n  onClick: callback,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  dangerouslySetInnerHTML: {\n    __html: answer\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 13\n  }\n}))))));\n\nexport default QuestionCard;","map":{"version":3,"sources":["/mnt/c/Users/francesco/Desktop/react-quiz-git/react-quiz/src/components/QuestionCard.tsx"],"names":["React","Wrapper","ButtonWrapper","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","__html","map","answer","correctAnswer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,uBAAvC;;AAWA,MAAMC,YAA6B,GAAG,CAAC;AACrCC,EAAAA,QADqC;AAErCC,EAAAA,OAFqC;AAGrCC,EAAAA,QAHqC;AAIrCC,EAAAA,UAJqC;AAKrCC,EAAAA,UALqC;AAMrCC,EAAAA;AANqC,CAAD,kBAQpC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAG,EAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACaD,UADb,SAC4BC,cAD5B,CADF,eAIE;AAAG,EAAA,uBAAuB,EAAE;AAAEC,IAAAA,MAAM,EAAEN;AAAV,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGC,OAAO,CAACM,GAAR,CAAaC,MAAD,iBACX,oBAAC,aAAD;AACE,EAAA,GAAG,EAAEA,MADP;AAEE,EAAA,OAAO,EAAE,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,aAAZ,MAA8BD,MAFzC;AAGE,EAAA,WAAW,EAAE,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,MAAZ,MAAuBA,MAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKE;AAAQ,EAAA,QAAQ,EAAEL,UAAU,GAAG,IAAH,GAAU,KAAtC;AAA6C,EAAA,KAAK,EAAEK,MAApD;AAA4D,EAAA,OAAO,EAAEN,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAM,EAAA,uBAAuB,EAAE;AAAEI,IAAAA,MAAM,EAAEE;AAAV,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CALF,CADD,CADH,CALF,CARF;;AA6BA,eAAeT,YAAf","sourcesContent":["import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n"]},"metadata":{},"sourceType":"module"}