{"version":3,"sources":["images/wallpaper.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76de831f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaper.2f6e7e46.jpg\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\n\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/wallpaper.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from 'react';\n\nimport { fetchQuizQuestions } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport { QuestionsState, Difficulty } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n  \n    setLoading(true);\n    setGameOver(false);\n    \n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    \n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  \n  };\n\n  const checkAnswer = (e: any) => {\n  \n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      \n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQ = number + 1;\n    nextQ === TOTAL_QUESTIONS ? setGameOver(true) : setNumber(nextQ);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}